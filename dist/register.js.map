{"version":3,"sources":["../src/register.tsx","../src/Panel.tsx"],"names":["React"],"mappings":";AAAA,SAAS,oBAAoB;AAC7B,SAAS,QAAQ,aAAa;AAC9B,SAAS,kBAAkB;AAC3B,OAAOA,YAAW;;;ACHlB,SAAS,WAAW,yBAAyB;AAC7C,OAAO,WAAW;AAGH,SAAR,UAA2B,EAAE,YAAY,GAAmB;AACjE,SACE,oCAAC,iBAEE,YAAY,IAAI,CAAC,MAAM;AAAA;AAAA,IAEtB,oCAAC,SAAI,KAAK,GAAG,IAAI,EAAE,SAAS,GAAG,OAAO,KAAK,QAAQ,EAAE,SAAS,KAC5D;AAAA,MAAC;AAAA;AAAA,QACC,UAAQ;AAAA,QACR,UAAU,KAAK,YAAY;AAAA,QAC3B,iBAAe;AAAA;AAAA,MAEd,KAAK;AAAA,IACR,CACF;AAAA,GACD,CACH;AAEJ;;;ADfA,IAAM,WAAW;AACjB,IAAM,WAAW,GAAG,QAAQ;AAE5B,OAAO,SAAS,UAAU,MAAM;AAC9B,QAAM,SAAS,CAAC,EAAE,SAAS,MAAM,MAAM;AAErC,UAAM,cAAmB,aAAa,cAAc,CAAC,CAAC;AAGtD,UAAM,gBAA8B,MAAM,QAAQ,WAAW,IACzD,YACG,IAAI,CAAC,SAAS;AAEb,UAAI,OAAO,SAAS;AAAU,eAAO,EAAE,MAAM,KAAK;AAElD,UAAI,OAAO,SAAS,YAAY,KAAK;AAAM,eAAO;AAElD,aAAO;AAAA,IACT,CAAC,EAEA,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,IAC1B,CAAC;AAGL,QAAI,cAAc,WAAW;AAC3B,aAAO,gBAAAA,OAAA,cAAC,SAAI,OAAO,EAAE,SAAS,OAAO,KAAG,0BAAwB;AAElE,WACE,gBAAAA,OAAA,cAAC,cAAW,UACV,gBAAAA,OAAA,cAAC,aAAU,aAAa,eAAe,CACzC;AAAA,EAEJ;AAGA,SAAO,IAAI,UAAU;AAAA,IACnB,MAAM,MAAM;AAAA,IACZ,OAAO;AAAA,IACP,UAAU;AAAA,IACV;AAAA,EACF,CAAC;AACH,CAAC","sourcesContent":["import { useParameter } from '@storybook/api';\nimport { addons, types } from '@storybook/addons';\nimport { AddonPanel } from '@storybook/components';\nimport React from 'react';\nimport CodePanel from './Panel';\nimport { SourceFile } from './types';\n\nconst ADDON_ID = 'jb-int/code';\nconst PANEL_ID = `${ADDON_ID}/panel`;\n\naddons.register(ADDON_ID, () => {\n  const render = ({ active = false }) => {\n    // Custom parameter, that should be used by consumers to pass their source code\n    const sourceFiles: any = useParameter('sourceCode', []);\n\n    // Prepare the data for the panel\n    const preparedFiles: SourceFile[] = Array.isArray(sourceFiles)\n      ? sourceFiles\n          .map((file) => {\n            // Turn string into object with code property\n            if (typeof file === 'string') return { code: file };\n            // Expected case. Assign to itself\n            if (typeof file === 'object' && file.code) return file;\n            // If array value is neither string nor object with code property, filter it out\n            return null;\n          })\n          // Filter out invalid data\n          .filter((file) => !!file)\n      : [];\n\n    // Show a message if no valid source code is passed\n    if (preparedFiles.length === 0)\n      return <div style={{ padding: '1rem' }}>No source code available</div>;\n\n    return (\n      <AddonPanel active={active}>\n        <CodePanel sourceFiles={preparedFiles} />\n      </AddonPanel>\n    );\n  };\n\n  // Register the addon as a panel in the Storybook UI\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: 'Source Code',\n    paramKey: 'storybook-addon-code',\n    render,\n  });\n});\n","import { TabsState, SyntaxHighlighter } from '@storybook/components';\nimport React from 'react';\nimport { CodePanelProps } from './types';\n\nexport default function CodePanel({ sourceFiles }: CodePanelProps) {\n  return (\n    <TabsState>\n      {/* Create a tab for each prepared file */}\n      {sourceFiles.map((file, i) => (\n        // id is used as the key and title as the tab title by TabsState\n        <div key={i} id={i.toString()} title={file.name || i.toString()}>\n          <SyntaxHighlighter\n            copyable\n            language={file.language || 'typescript'}\n            showLineNumbers\n          >\n            {file.code}\n          </SyntaxHighlighter>\n        </div>\n      ))}\n    </TabsState>\n  );\n}\n"]}