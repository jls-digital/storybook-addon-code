{"version":3,"sources":["../src/register.tsx","../src/Panel.tsx"],"names":["React"],"mappings":";AAAA,SAAS,oBAAoB;AAC7B,SAAS,QAAQ,aAAa;AAC9B,SAAS,kBAAkB;AAC3B,OAAOA,YAAW;;;ACHlB,SAAS,WAAW,yBAAyB;AAC7C,OAAO,WAAW;AAGH,SAAR,UAA2B,EAAE,YAAY,GAAmB;AACjE,MAAI,YAAY,WAAW;AACzB,WAAO,oCAAC,SAAI,OAAO,EAAE,SAAS,OAAO,KAAG,0BAAwB;AAElE,SACE,oCAAC,iBACE,YAAY,IAAI,CAAC,MAAM,MACtB;AAAA,IAAC;AAAA;AAAA,MACC,KAAK;AAAA,MACL,IAAI,MAAM,MAAM,EAAE,SAAS;AAAA,MAC3B,OAAO,MAAM,QAAQ,EAAE,SAAS;AAAA;AAAA,IAEhC;AAAA,MAAC;AAAA;AAAA,QACC,UAAU,MAAM,YAAY;AAAA,QAC5B,UAAQ;AAAA,QACR,iBAAe;AAAA;AAAA,MAEd,MAAM;AAAA,IACT;AAAA,EACF,CACD,CACH;AAEJ;;;ADpBA,IAAM,WAAW;AACjB,IAAM,WAAW,GAAG,QAAQ;AAE5B,OAAO,SAAS,UAAU,MAAM;AAC9B,QAAM,SAAS,CAAC,EAAE,SAAS,MAAM,MAAM;AACrC,UAAM,cAA4B,aAAa,cAAc,CAAC,CAAC;AAE/D,WACE,gBAAAA,OAAA,cAAC,cAAW,UACV,gBAAAA,OAAA,cAAC,aAAU,aAA0B,CACvC;AAAA,EAEJ;AAEA,SAAO,IAAI,UAAU;AAAA,IACnB,MAAM,MAAM;AAAA,IACZ,OAAO;AAAA,IACP,UAAU;AAAA,IACV;AAAA,EACF,CAAC;AACH,CAAC","sourcesContent":["import { useParameter } from '@storybook/api';\nimport { addons, types } from '@storybook/addons';\nimport { AddonPanel } from '@storybook/components';\nimport React from 'react';\nimport CodePanel from './Panel';\nimport { SourceFile } from './types';\n\nconst ADDON_ID = 'jb-int/code';\nconst PANEL_ID = `${ADDON_ID}/panel`;\n\naddons.register(ADDON_ID, () => {\n  const render = ({ active = false }) => {\n    const sourceFiles: SourceFile[] = useParameter('sourceCode', []);\n\n    return (\n      <AddonPanel active={active}>\n        <CodePanel sourceFiles={sourceFiles} />\n      </AddonPanel>\n    );\n  };\n\n  addons.add(PANEL_ID, {\n    type: types.PANEL,\n    title: 'Source Code',\n    paramKey: 'storybook-addon-code',\n    render,\n  });\n});\n","import { TabsState, SyntaxHighlighter } from '@storybook/components';\nimport React from 'react';\nimport { CodePanelProps } from './types';\n\nexport default function CodePanel({ sourceFiles }: CodePanelProps) {\n  if (sourceFiles.length === 0)\n    return <div style={{ padding: '1rem' }}>No source code available</div>;\n\n  return (\n    <TabsState>\n      {sourceFiles.map((file, i) => (\n        <div\n          key={i}\n          id={file?.id || i.toString()}\n          title={file?.name || i.toString()}\n        >\n          <SyntaxHighlighter\n            language={file?.language || 'typescript'}\n            copyable\n            showLineNumbers\n          >\n            {file?.code}\n          </SyntaxHighlighter>\n        </div>\n      ))}\n    </TabsState>\n  );\n}\n"]}